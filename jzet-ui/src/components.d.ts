/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color } from "./interface";
export namespace Components {
    interface JzetAvatar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "imgURL"?: string;
        "name": string;
        "size"?: 'small' | 'large';
    }
    interface JzetBadge {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "form"?: 'circle' | 'pill';
    }
    interface JzetButton {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set to `"minimal"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"`
         */
        "fill"?: 'minimal' | 'outline' | 'solid';
    }
    interface JzetCheckbox {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": string;
    }
    interface JzetChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetFilepicker {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
    }
    interface JzetInput {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        "indicator": boolean;
        "label": string;
        "placeholder": string;
        /**
          * If `true`, the input is required.
         */
        "required": boolean;
        "type": "text";
        "value": string;
    }
    interface JzetItem {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled": boolean;
    }
    interface JzetPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the radio is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled": boolean;
        /**
          * Determines, whether the control is disabled from the parent group
         */
        "groupDisabled": boolean;
        /**
          * The name of the radio button. All radio buttons with the same name belong to one group.
         */
        "name": string;
        /**
          * The value of the radio.
         */
        "value": string;
    }
    interface JzetRadioGroup {
        /**
          * If `true`, the user cannot interact with the radio-group.
         */
        "disabled": boolean;
        /**
          * Sets the flex direction for the radio buttons.
         */
        "flexDirection"?: 'row' | 'column';
        /**
          * Name for the radio buttons within this group
         */
        "name": string;
        /**
          * The value of the selected radio button.
         */
        "value": string;
    }
    interface JzetSelect {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set the property for the items to define as label. Default: "label"
         */
        "itemLabelProperty": string;
        /**
          * Set thte property for the itmes to define as value. Default: "value"
         */
        "itemValueProperty": string;
        /**
          * An array of items to choose from.
         */
        "items": any[];
        /**
          * Optional placeholder if no value is selected.
         */
        "placeholder"?: string;
        /**
          * The selected value of the combobox
         */
        "value": string;
    }
    interface JzetSelectOptions {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled": boolean;
        /**
          * Set the property for the items to define as label. Default: "label"
         */
        "itemLabelProperty": string;
        /**
          * Set the property for the items to define as value. Default: "value"
         */
        "itemValueProperty": string;
        /**
          * An array of items to choose from
         */
        "items": any[];
        /**
          * Set the light or dark mode.
         */
        "mode": string;
        /**
          * The selected value
         */
        "value": string;
        /**
          * Determines, whether the options are visible or not
         */
        "visible": boolean;
    }
    interface JzetSwitch {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled": boolean;
        "label": string;
        /**
          * The value of the switch
         */
        "value": boolean;
    }
    interface JzetTextarea {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * The placeholder for the textarea.
         */
        "placeholder": string;
        "rows"?: number;
        /**
          * The initial value. Can be updated at runtime.
         */
        "value": string;
    }
    interface JzetTooltip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLJzetAvatarElement extends Components.JzetAvatar, HTMLStencilElement {
    }
    var HTMLJzetAvatarElement: {
        prototype: HTMLJzetAvatarElement;
        new (): HTMLJzetAvatarElement;
    };
    interface HTMLJzetBadgeElement extends Components.JzetBadge, HTMLStencilElement {
    }
    var HTMLJzetBadgeElement: {
        prototype: HTMLJzetBadgeElement;
        new (): HTMLJzetBadgeElement;
    };
    interface HTMLJzetButtonElement extends Components.JzetButton, HTMLStencilElement {
    }
    var HTMLJzetButtonElement: {
        prototype: HTMLJzetButtonElement;
        new (): HTMLJzetButtonElement;
    };
    interface HTMLJzetCheckboxElement extends Components.JzetCheckbox, HTMLStencilElement {
    }
    var HTMLJzetCheckboxElement: {
        prototype: HTMLJzetCheckboxElement;
        new (): HTMLJzetCheckboxElement;
    };
    interface HTMLJzetChipElement extends Components.JzetChip, HTMLStencilElement {
    }
    var HTMLJzetChipElement: {
        prototype: HTMLJzetChipElement;
        new (): HTMLJzetChipElement;
    };
    interface HTMLJzetFilepickerElement extends Components.JzetFilepicker, HTMLStencilElement {
    }
    var HTMLJzetFilepickerElement: {
        prototype: HTMLJzetFilepickerElement;
        new (): HTMLJzetFilepickerElement;
    };
    interface HTMLJzetInputElement extends Components.JzetInput, HTMLStencilElement {
    }
    var HTMLJzetInputElement: {
        prototype: HTMLJzetInputElement;
        new (): HTMLJzetInputElement;
    };
    interface HTMLJzetItemElement extends Components.JzetItem, HTMLStencilElement {
    }
    var HTMLJzetItemElement: {
        prototype: HTMLJzetItemElement;
        new (): HTMLJzetItemElement;
    };
    interface HTMLJzetPopoverElement extends Components.JzetPopover, HTMLStencilElement {
    }
    var HTMLJzetPopoverElement: {
        prototype: HTMLJzetPopoverElement;
        new (): HTMLJzetPopoverElement;
    };
    interface HTMLJzetRadioElement extends Components.JzetRadio, HTMLStencilElement {
    }
    var HTMLJzetRadioElement: {
        prototype: HTMLJzetRadioElement;
        new (): HTMLJzetRadioElement;
    };
    interface HTMLJzetRadioGroupElement extends Components.JzetRadioGroup, HTMLStencilElement {
    }
    var HTMLJzetRadioGroupElement: {
        prototype: HTMLJzetRadioGroupElement;
        new (): HTMLJzetRadioGroupElement;
    };
    interface HTMLJzetSelectElement extends Components.JzetSelect, HTMLStencilElement {
    }
    var HTMLJzetSelectElement: {
        prototype: HTMLJzetSelectElement;
        new (): HTMLJzetSelectElement;
    };
    interface HTMLJzetSelectOptionsElement extends Components.JzetSelectOptions, HTMLStencilElement {
    }
    var HTMLJzetSelectOptionsElement: {
        prototype: HTMLJzetSelectOptionsElement;
        new (): HTMLJzetSelectOptionsElement;
    };
    interface HTMLJzetSwitchElement extends Components.JzetSwitch, HTMLStencilElement {
    }
    var HTMLJzetSwitchElement: {
        prototype: HTMLJzetSwitchElement;
        new (): HTMLJzetSwitchElement;
    };
    interface HTMLJzetTextareaElement extends Components.JzetTextarea, HTMLStencilElement {
    }
    var HTMLJzetTextareaElement: {
        prototype: HTMLJzetTextareaElement;
        new (): HTMLJzetTextareaElement;
    };
    interface HTMLJzetTooltipElement extends Components.JzetTooltip, HTMLStencilElement {
    }
    var HTMLJzetTooltipElement: {
        prototype: HTMLJzetTooltipElement;
        new (): HTMLJzetTooltipElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "jzet-avatar": HTMLJzetAvatarElement;
        "jzet-badge": HTMLJzetBadgeElement;
        "jzet-button": HTMLJzetButtonElement;
        "jzet-checkbox": HTMLJzetCheckboxElement;
        "jzet-chip": HTMLJzetChipElement;
        "jzet-filepicker": HTMLJzetFilepickerElement;
        "jzet-input": HTMLJzetInputElement;
        "jzet-item": HTMLJzetItemElement;
        "jzet-popover": HTMLJzetPopoverElement;
        "jzet-radio": HTMLJzetRadioElement;
        "jzet-radio-group": HTMLJzetRadioGroupElement;
        "jzet-select": HTMLJzetSelectElement;
        "jzet-select-options": HTMLJzetSelectOptionsElement;
        "jzet-switch": HTMLJzetSwitchElement;
        "jzet-textarea": HTMLJzetTextareaElement;
        "jzet-tooltip": HTMLJzetTooltipElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface JzetAvatar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "imgURL"?: string;
        "name"?: string;
        "size"?: 'small' | 'large';
    }
    interface JzetBadge {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "form"?: 'circle' | 'pill';
    }
    interface JzetButton {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set to `"minimal"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"`
         */
        "fill"?: 'minimal' | 'outline' | 'solid';
    }
    interface JzetCheckbox {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        "onValueChanged"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: string;
    }
    interface JzetChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetFilepicker {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
    }
    interface JzetInput {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        "indicator"?: boolean;
        "label"?: string;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        /**
          * If `true`, the input is required.
         */
        "required"?: boolean;
        "type"?: "text";
        "value"?: string;
    }
    interface JzetItem {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled"?: boolean;
    }
    interface JzetPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetRadio {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the radio is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the radio.
         */
        "disabled"?: boolean;
        /**
          * Determines, whether the control is disabled from the parent group
         */
        "groupDisabled"?: boolean;
        /**
          * The name of the radio button. All radio buttons with the same name belong to one group.
         */
        "name"?: string;
        "onValueChanged"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * The value of the radio.
         */
        "value"?: string;
    }
    interface JzetRadioGroup {
        /**
          * If `true`, the user cannot interact with the radio-group.
         */
        "disabled"?: boolean;
        /**
          * Sets the flex direction for the radio buttons.
         */
        "flexDirection"?: 'row' | 'column';
        /**
          * Name for the radio buttons within this group
         */
        "name"?: string;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        /**
          * The value of the selected radio button.
         */
        "value"?: string;
    }
    interface JzetSelect {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set the property for the items to define as label. Default: "label"
         */
        "itemLabelProperty"?: string;
        /**
          * Set thte property for the itmes to define as value. Default: "value"
         */
        "itemValueProperty"?: string;
        /**
          * An array of items to choose from.
         */
        "items"?: any[];
        /**
          * Event is being emitted when input gets focus..
         */
        "onFocusGained"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Event is being emitted when focus gets lost.
         */
        "onFocusLost"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Event is being emitted when value changes
         */
        "onItemSelected"?: (event: CustomEvent<any>) => void;
        /**
          * Optional placeholder if no value is selected.
         */
        "placeholder"?: string;
        /**
          * The selected value of the combobox
         */
        "value"?: string;
    }
    interface JzetSelectOptions {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled"?: boolean;
        /**
          * Set the property for the items to define as label. Default: "label"
         */
        "itemLabelProperty"?: string;
        /**
          * Set the property for the items to define as value. Default: "value"
         */
        "itemValueProperty"?: string;
        /**
          * An array of items to choose from
         */
        "items"?: any[];
        /**
          * Set the light or dark mode.
         */
        "mode"?: string;
        /**
          * Event is being emitted when value changes.
         */
        "onItemSelected"?: (event: CustomEvent<any>) => void;
        /**
          * The selected value
         */
        "value"?: string;
        /**
          * Determines, whether the options are visible or not
         */
        "visible"?: boolean;
    }
    interface JzetSwitch {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled"?: boolean;
        "label"?: string;
        /**
          * Event is being emitted when value changes.
         */
        "onValueChanged"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * The value of the switch
         */
        "value"?: boolean;
    }
    interface JzetTextarea {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Event is being emitted when input gets focus.
         */
        "onFocusGained"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Event is being emitted when focus gets lost.
         */
        "onFocusLost"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Event is being emitted when value changes.
         */
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        /**
          * The placeholder for the textarea.
         */
        "placeholder"?: string;
        "rows"?: number;
        /**
          * The initial value. Can be updated at runtime.
         */
        "value"?: string;
    }
    interface JzetTooltip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "jzet-avatar": JzetAvatar;
        "jzet-badge": JzetBadge;
        "jzet-button": JzetButton;
        "jzet-checkbox": JzetCheckbox;
        "jzet-chip": JzetChip;
        "jzet-filepicker": JzetFilepicker;
        "jzet-input": JzetInput;
        "jzet-item": JzetItem;
        "jzet-popover": JzetPopover;
        "jzet-radio": JzetRadio;
        "jzet-radio-group": JzetRadioGroup;
        "jzet-select": JzetSelect;
        "jzet-select-options": JzetSelectOptions;
        "jzet-switch": JzetSwitch;
        "jzet-textarea": JzetTextarea;
        "jzet-tooltip": JzetTooltip;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jzet-avatar": LocalJSX.JzetAvatar & JSXBase.HTMLAttributes<HTMLJzetAvatarElement>;
            "jzet-badge": LocalJSX.JzetBadge & JSXBase.HTMLAttributes<HTMLJzetBadgeElement>;
            "jzet-button": LocalJSX.JzetButton & JSXBase.HTMLAttributes<HTMLJzetButtonElement>;
            "jzet-checkbox": LocalJSX.JzetCheckbox & JSXBase.HTMLAttributes<HTMLJzetCheckboxElement>;
            "jzet-chip": LocalJSX.JzetChip & JSXBase.HTMLAttributes<HTMLJzetChipElement>;
            "jzet-filepicker": LocalJSX.JzetFilepicker & JSXBase.HTMLAttributes<HTMLJzetFilepickerElement>;
            "jzet-input": LocalJSX.JzetInput & JSXBase.HTMLAttributes<HTMLJzetInputElement>;
            "jzet-item": LocalJSX.JzetItem & JSXBase.HTMLAttributes<HTMLJzetItemElement>;
            "jzet-popover": LocalJSX.JzetPopover & JSXBase.HTMLAttributes<HTMLJzetPopoverElement>;
            "jzet-radio": LocalJSX.JzetRadio & JSXBase.HTMLAttributes<HTMLJzetRadioElement>;
            "jzet-radio-group": LocalJSX.JzetRadioGroup & JSXBase.HTMLAttributes<HTMLJzetRadioGroupElement>;
            "jzet-select": LocalJSX.JzetSelect & JSXBase.HTMLAttributes<HTMLJzetSelectElement>;
            "jzet-select-options": LocalJSX.JzetSelectOptions & JSXBase.HTMLAttributes<HTMLJzetSelectOptionsElement>;
            "jzet-switch": LocalJSX.JzetSwitch & JSXBase.HTMLAttributes<HTMLJzetSwitchElement>;
            "jzet-textarea": LocalJSX.JzetTextarea & JSXBase.HTMLAttributes<HTMLJzetTextareaElement>;
            "jzet-tooltip": LocalJSX.JzetTooltip & JSXBase.HTMLAttributes<HTMLJzetTooltipElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
