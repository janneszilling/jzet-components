/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color } from "./interface";
export namespace Components {
    interface JzetAvatar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "imgURL"?: string;
        "name": string;
        "size"?: 'small' | 'large';
    }
    interface JzetBadge {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "form"?: 'circle' | 'pill';
    }
    interface JzetButton {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set to `"minimal"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"`
         */
        "fill"?: 'minimal' | 'outline' | 'solid';
    }
    interface JzetCheckbox {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": string;
    }
    interface JzetChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetFilepicker {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
    }
    interface JzetInput {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        "indicator": boolean;
        "label": string;
        "placeholder": string;
        /**
          * If `true`, the input is required.
         */
        "required": boolean;
        "type": "text";
        "value": string;
    }
    interface JzetItem {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled": boolean;
    }
    interface JzetPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLJzetAvatarElement extends Components.JzetAvatar, HTMLStencilElement {
    }
    var HTMLJzetAvatarElement: {
        prototype: HTMLJzetAvatarElement;
        new (): HTMLJzetAvatarElement;
    };
    interface HTMLJzetBadgeElement extends Components.JzetBadge, HTMLStencilElement {
    }
    var HTMLJzetBadgeElement: {
        prototype: HTMLJzetBadgeElement;
        new (): HTMLJzetBadgeElement;
    };
    interface HTMLJzetButtonElement extends Components.JzetButton, HTMLStencilElement {
    }
    var HTMLJzetButtonElement: {
        prototype: HTMLJzetButtonElement;
        new (): HTMLJzetButtonElement;
    };
    interface HTMLJzetCheckboxElement extends Components.JzetCheckbox, HTMLStencilElement {
    }
    var HTMLJzetCheckboxElement: {
        prototype: HTMLJzetCheckboxElement;
        new (): HTMLJzetCheckboxElement;
    };
    interface HTMLJzetChipElement extends Components.JzetChip, HTMLStencilElement {
    }
    var HTMLJzetChipElement: {
        prototype: HTMLJzetChipElement;
        new (): HTMLJzetChipElement;
    };
    interface HTMLJzetFilepickerElement extends Components.JzetFilepicker, HTMLStencilElement {
    }
    var HTMLJzetFilepickerElement: {
        prototype: HTMLJzetFilepickerElement;
        new (): HTMLJzetFilepickerElement;
    };
    interface HTMLJzetInputElement extends Components.JzetInput, HTMLStencilElement {
    }
    var HTMLJzetInputElement: {
        prototype: HTMLJzetInputElement;
        new (): HTMLJzetInputElement;
    };
    interface HTMLJzetItemElement extends Components.JzetItem, HTMLStencilElement {
    }
    var HTMLJzetItemElement: {
        prototype: HTMLJzetItemElement;
        new (): HTMLJzetItemElement;
    };
    interface HTMLJzetPopoverElement extends Components.JzetPopover, HTMLStencilElement {
    }
    var HTMLJzetPopoverElement: {
        prototype: HTMLJzetPopoverElement;
        new (): HTMLJzetPopoverElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "jzet-avatar": HTMLJzetAvatarElement;
        "jzet-badge": HTMLJzetBadgeElement;
        "jzet-button": HTMLJzetButtonElement;
        "jzet-checkbox": HTMLJzetCheckboxElement;
        "jzet-chip": HTMLJzetChipElement;
        "jzet-filepicker": HTMLJzetFilepickerElement;
        "jzet-input": HTMLJzetInputElement;
        "jzet-item": HTMLJzetItemElement;
        "jzet-popover": HTMLJzetPopoverElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface JzetAvatar {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "imgURL"?: string;
        "name"?: string;
        "size"?: 'small' | 'large';
    }
    interface JzetBadge {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        "form"?: 'circle' | 'pill';
    }
    interface JzetButton {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        /**
          * Set to `"minimal"` for a transparent button, to `"outline"` for a transparent button with a border, or to `"solid"`. The default style is `"solid"`
         */
        "fill"?: 'minimal' | 'outline' | 'solid';
    }
    interface JzetCheckbox {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the checkbox is selected.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `checked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: string;
    }
    interface JzetChip {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface JzetFilepicker {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the checkbox.
         */
        "disabled"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
    }
    interface JzetInput {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button.
         */
        "expand"?: 'default' | 'block';
        "indicator"?: boolean;
        "label"?: string;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        /**
          * If `true`, the input is required.
         */
        "required"?: boolean;
        "type"?: "text";
        "value"?: string;
    }
    interface JzetItem {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
        /**
          * If `true`, the user cannot interact with the item.
         */
        "disabled"?: boolean;
    }
    interface JzetPopover {
        /**
          * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
         */
        "appearance"?: Color;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "jzet-avatar": JzetAvatar;
        "jzet-badge": JzetBadge;
        "jzet-button": JzetButton;
        "jzet-checkbox": JzetCheckbox;
        "jzet-chip": JzetChip;
        "jzet-filepicker": JzetFilepicker;
        "jzet-input": JzetInput;
        "jzet-item": JzetItem;
        "jzet-popover": JzetPopover;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jzet-avatar": LocalJSX.JzetAvatar & JSXBase.HTMLAttributes<HTMLJzetAvatarElement>;
            "jzet-badge": LocalJSX.JzetBadge & JSXBase.HTMLAttributes<HTMLJzetBadgeElement>;
            "jzet-button": LocalJSX.JzetButton & JSXBase.HTMLAttributes<HTMLJzetButtonElement>;
            "jzet-checkbox": LocalJSX.JzetCheckbox & JSXBase.HTMLAttributes<HTMLJzetCheckboxElement>;
            "jzet-chip": LocalJSX.JzetChip & JSXBase.HTMLAttributes<HTMLJzetChipElement>;
            "jzet-filepicker": LocalJSX.JzetFilepicker & JSXBase.HTMLAttributes<HTMLJzetFilepickerElement>;
            "jzet-input": LocalJSX.JzetInput & JSXBase.HTMLAttributes<HTMLJzetInputElement>;
            "jzet-item": LocalJSX.JzetItem & JSXBase.HTMLAttributes<HTMLJzetItemElement>;
            "jzet-popover": LocalJSX.JzetPopover & JSXBase.HTMLAttributes<HTMLJzetPopoverElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
